Libraries

Библиотека или модуль — это набор готовых функций, объединённых общей темой.

Чтобы получить доступ к этим функциям, нужно в начале программы импортировать библиотеку командой import. Тогда в коде можно будет применять все функции, которые есть в библиотеке. 


import libraries_name


Часть функций не нуждаются в импорте, они встроены в Python и доступны без дополнительных манипуляций (print())

Если все функции библиотеки не нужны, можно импортировать только те, которые требуются: from random import choice  (из библиотеки random подключить функцию  choice).

В таком случае к этой функции обращаются напрямую, без указания имени библиотеки.

Иногда у библиотек очень длинные имена, и, если не хочется при каждом вызове писать её полное имя и загромождать код, при импорте можно дать библиотеке короткий «псевдоним» через ключевое слово as:

import libraries_name as alias_name

random

random.randint(min, max) выберет случайное целое число в диапазоне от числа min до числа max;
random.choice(список) вернёт случайный элемент из списка;
random.random() вернёт случайное дробное число от 0.0 до 1.0.

datatime

Для работы со временем в Python импортируют библиотеку datetime. 
В ней есть не только отдельные функции, но и целый новый тип данных — datetime.
Название типа данных точно совпадает с библиотекой, и это не слишком удобно.
Чтобы не путаться, библиотеку будем подключать под именем dt: 

import datetime as dt

Тип данных datetime — ещё один тип, как int, string или dict.
Он нужен, чтобы хранить информацию о конкретном моменте времени: год, месяц, день, час, минуты, секунды и микросекунды. 

Чтобы создать объект этого типа, нужно вызвать функцию datetime()  из библиотеки dt. 
Она принимает обязательные аргументы — год, месяц и день, — и необязательные: час, минута, секунда и микросекунда, которые по умолчанию равны нулю.

time_name = dt.datatime(1971, 4, 28, 16, 45 )

Тип данных datetime позволяет просто вычитать даты друг из друга, как обычные числа.

При создании данных типа datetime можно не указывать время и обойтись только датой. 
В этом случае метка времени будет установлена автоматически, это будет полночь, начало заданной даты.

У любой переменной типа данных datetime можно вызвать метод utcnow().
Он вернёт текущий момент времени по UTC с эталонной точностью до микросекунд.
 dt.datetime.utcnow()
 
нельзя складывать переменную типа datetime с переменной типа int

Тип данных timedelta, в котором можно сохранить определённый промежуток времени — в часах, днях, годах, как угодно. 
Этот тип данных тоже хранится в библиотеке dt. А объект такого типа создаётся функцией timedelta()

period = dt.timedelta(hours=3)

В аргументах функции timedelta() можно указывать days, hours, minutes, seconds, microseconds.

метод strftime(). Его можно применить к любому объекту типа datetime и аргументом задать формат вывода времени:

time_name.strftime('%H:%M')) 

Здесь %H означает часы, %M — минуты. 
Кроме этих параметров, бывают ещё, например %B  — месяц, %Y — год и %S — секунды, %A — название дня недели по-английски, %U — номер недели в году.


